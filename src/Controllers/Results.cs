using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Brass.Controllers;

public static class Results
{
    public static Result Continue() => new Result(100);
    public static Result SwitchingProtocols() => new Result(101);
    public static Result Processing() => new Result(102);
    public static Result EarlyHints() => new Result(103);
    public static Result Ok() => new Result(200);
    public static Result<T> Ok<T>(T content) => new Result<T>(200, content);
    public static Result Created() => new Result(201);
    public static Result<T> Created<T>(string location, T content) => new Result<T>(201, content);
    public static Result Accepted() => new Result(202);
    public static Result NonAuthoritativeInformation() => new Result(203);
    public static Result NoContent() => new Result(204);
    public static Result ResetContent() => new Result(205);
    public static Result PartialContent() => new Result(206);
    public static Result<T> PatialContent<T>(T content) => new Result<T>(206, content);
    public static Result<IEnumerable<Result>> MultiStatus(IEnumerable<Result> results) => new Result<IEnumerable<Result>>(207, results);
    public static Result AlreadyReported() => new Result(208);
    public static Result ImUsed() => new Result(226);
    public static Result MultipleChoices() => new Result(300);
    public static Result MovedPermanently() => new Result(301);
    public static Result Found() => new Result(302);
    public static Result SeeOther() => new Result(303);
    public static Result NotModified() => new Result(304);
    public static Result UseProxy() => new Result(305);
    public static Result SwitchProxy() => new Result(306);
    public static Result TemporaryRedirect() => new Result(307);
    public static Result PermanentRedirect() => new Result(308);
    public static Result BadRequest() => new Result(400);
    public static Result<T> BadRequest<T>(T content) => new Result<T>(400, content);
    public static Result Unauthorized() => new Result(401);
    public static Result PaymentRequired() => new Result(402);
    public static Result Forbidden() => new Result(403);
    public static Result NotFound() => new Result(404);
    public static Result MethodNotAllowed() => new Result(405);
    public static Result NotAcceptable() => new Result(406);
    public static Result ProxyAuthenticationRequired() => new Result(407);
    public static Result RequestTimeout() => new Result(408);
    public static Result Conflict() => new Result(409);
    public static Result Gone() => new Result(410);
    public static Result LengthRequired() => new Result(411);
    public static Result PreconditionFailed() => new Result(412);
    public static Result PayloadTooLarge() => new Result(413);
    public static Result URITooLong() => new Result(414);
    public static Result UnsupportedMediaType() => new Result(415);
    public static Result RangeNotSatisfiable() => new Result(416);
    public static Result ExpectationFailed() => new Result(417);
    public static Result ImATeapot() => new Result(418);
    public static Result MisdirectedRequest() => new Result(421);
    public static Result UnprocessableEntity() => new Result(422);
    public static Result Locked() => new Result(423);
    public static Result FailedDependency() => new Result(424);
    public static Result TooEarly() => new Result(425);
    public static Result UpgradeRequired() => new Result(426);
    public static Result PreconditionRequired() => new Result(428);
    public static Result TooManyRequests() => new Result(429);
    public static Result RequestHeaderFieldsTooLarge() => new Result(431);
    public static Result UnavailableForLegalReasons() => new Result(451);
    public static Result InternalServerError() => new Result(500);
    public static Result NotImplemented() => new Result(501);
    public static Result BadGetway() => new Result(502);
    public static Result ServiceUnavailable() => new Result(503);
    public static Result GatewayTimeout() => new Result(504);
    public static Result HTTPVersionNotSupported() => new Result(505);
    public static Result VariantAlsoNegotiates() => new Result(506);
    public static Result InsufficientStorage() => new Result(507);
    public static Result LoopDetected() => new Result(508);
    public static Result BandwidthLimitExceeded() => new Result(509);
    public static Result NotExtended() => new Result(510);
    public static Result NetworkAuthenticationRequired() => new Result(511);
}